{"version":3,"sources":["utils/data.ts","components/generalVizData.ts","components/teamStatData.ts","components/medal.data.tsx","components/Medal.tsx","components/teamStat.tsx","components/tooltip.data.ts","components/Tooltip.tsx","components/GeneralViz.tsx","components/Legen.Item.tsx","components/legend.data.tsx","components/Legend.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["parseData","d","rank","Number","Rank","seassons_played","club","Club","played_games","victories","Victories","draw","Draw","loss","Loss","goals_scored","goals_conceded","goal_difference","points","Points","parseScoreData","gold","Gold","big_silver","small_silver","bronze","Bronze","getGraphInfo","data","field","max_gamesPlayed","max","t","scaleLinear","domain","undefined","range","statSize","getBronze","slot","posY","height","m","i","transform","className","cx","cy","rx","width","uuidv4","getLittleSilver","circY","r","getBigSilver","arcInfo","d3Arc","arc","innerRadius","outerRadius","startAngle","endAngle","Math","PI","getGolden","Medal","numberMedals","type","posX","medals","Array","map","TeamStat","gamesScale","team","score","position","mouseEnter","mouseLeave","victoriesWidth","drawWidth","lossWidth","lineHeight","onMouseEnter","x","y","onMouseLeave","getBoxPosition","display","getClassType","Tooltip","value","opacity","pos","id","style","GeneralViz","scoreData","useState","setPosition","setOpacity","info","setInfo","useCallback","length","find","LegendItem","size","figure","tittle","legendSize","legendList","Legend","e","App","setData","setScore","useEffect","csv","then","Rmap","teamData","target","rel","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.81f753c0.chunk.js","sourcesContent":["import { score, team } from '../interfaces/types'\n\n/**\n * Take a DSVRowArray line and parse it into a team type\n * @param d DSVRowArray containing all the info of a team\n * @returns a team type\n */\nexport const parseData = (d: any): team => {\n    return {\n        rank: Number(d.Rank),\n        seassons_played: Number(d[\"Seassons played\"]),\n        club: d.Club,\n        played_games: Number(d[\"Played games\"]),\n        victories: Number(d.Victories),\n        draw: Number(d.Draw),\n        loss: Number(d.Loss),\n        goals_scored: Number(d[\"Goals scored\"]),\n        goals_conceded: Number(d[\"Goals conceded\"]),\n        goal_difference: Number(d[\"Goal difference\"]),\n        points: Number(d.Points)\n    }\n}\n\nexport const parseScoreData = (d: any): score => {\n    return {\n        rank: Number(d.Rank),\n        club: d.Club,\n        gold: Number(d.Gold),\n        big_silver: Number(d[\"Big silver\"]),\n        small_silver: Number(d[\"Small silver\"]),\n        bronze: Number(d.Bronze),\n        points: Number(d.Points),\n    }\n\n}\n\n\n\n","import { score, team } from \"../interfaces/types\";\nimport { max, scaleLinear } from 'd3'\n\nexport const size = 375;\n/** \nReturns an accessor for an specific field in team\n@param field a string with the specific field name from team\n*/\nconst accessTeamData = (field: \"draw\" | \"goal_difference\" | \"goals_conceded\" | \"goals_scored\" | \"loss\" | \"played_games\" | \"points\" | \"rank\" | \"seassons_played\" | \"victories\") => {\n    return (t: team) => t[field];\n}\n\nexport const clubNameAccessor = (t: team) => t.club;\n\n\nexport const getGraphInfo = (data: team[]) => {\n    const max_gamesPlayed: number | undefined = max(data, accessTeamData(\"played_games\"));\n    return scaleLinear()\n        .domain([0, max_gamesPlayed !== undefined ? max_gamesPlayed : 0])\n        .range([0, size])\n}\n\n\nexport const filterByClub = (club: string) => {\n    return (score: score) => score.club === club;\n}\n\n","import { size } from \"./generalVizData\";\n\nexport const statSize: { width: number, height: number } = { width: size, height: 20 };\nexport const lineHeight: number = 3;\n","import { v4 as uuidv4 } from 'uuid';\nimport { arc as d3Arc } from 'd3';\n\nexport const getBronze = (slot: number, posY: number, height: number) => {\n    return (m: any, i: number) => (\n        <rect transform={\"translate(\" + (i * slot) + \",\" + (height / 2) + \")\"}\n            key={uuidv4()}\n            className=\"medal medal-bronze\"\n            cx={0}\n            cy={0}\n            rx={15}\n            width={2}\n            height={height}></rect>\n    )\n}\n\nexport const getLittleSilver = (slot: number, posY: number, height: number) => {\n    const circY: number = height / 5;\n    return (m: any, i: number) => (\n        <circle\n            key={uuidv4()}\n            className=\"medal medal-little-silver\"\n            cx={(i * slot)}\n            cy={(posY + (i % 2 === 0 ? circY * 2 - height : height - circY * 2))}\n            r={circY}\n        />\n    )\n}\n\nexport const getBigSilver = (slot: number, posY: number) => {\n    const arc = d3Arc();\n    const arcInfo = arc({\n        innerRadius: 0,\n        outerRadius: slot > posY ? posY : slot,\n        startAngle: 0,\n        endAngle: Math.PI / 2\n    });\n    return (m: any, i: number) => (\n        <path\n            key={uuidv4()}\n            className=\"medal medal-big-silver\"\n            transform={\"translate(\" + (i * slot) + \",\" + (posY) + \") rotate(\" + (i % 2 === 0 ? 0 : 90) + \")\"}\n            d={arcInfo ? arcInfo : \"\"}\n        />\n    )\n}\n\nexport const getGolden = (slot: number, posY: number, height: number) => {\n    return (m: any, i: number) => (\n        <rect transform={\"translate(\" + (i * slot) + \",\" + (posY + (i % 2 === 0 ? 0 : 2 - height)) + \") rotate(\" + (i % 2 === 0 ? -45 : 45) + \")\"}\n            key={uuidv4()}\n            className=\"medal medal-gold\"\n            cx={0}\n            cy={0}\n            rx={15}\n            width={2}\n            height={height}></rect>\n    )\n}","import React from 'react';\nimport { getBigSilver, getBronze, getGolden, getLittleSilver } from './medal.data';\n\n\ninterface medalI {\n    numberMedals: number,\n    type: \"gold\" | \"big_silver\" | \"small_silver\" | \"bronze\",\n    width: number,\n    posX: number,\n    posY: number\n}\n\nconst medalHeight: number = 10;\n\nexport const Medal = ({ numberMedals, type, width, posX, posY }: React.PropsWithChildren<medalI>) => {\n    //create an arc generator with the data\n    //return paths for each medal along the width\n    const slot: number = width / numberMedals;\n    const medals = [...Array(numberMedals)];\n\n    return (\n        <g transform={\"translate(\" + (posX) + \",\" + 0 + \")\"}>\n            {type === \"gold\" ?\n                medals.map(getGolden(slot, posY, medalHeight)) :\n                type === \"big_silver\" ? medals.map(getBigSilver(slot, posY)) :\n                    type === \"small_silver\" ? medals.map(getLittleSilver(slot, posY, medalHeight)) :\n                        type === \"bronze\" ? medals.map(getBronze(slot, posY, medalHeight)) : <></>}\n        </g>\n    )\n}\n\n","import React from 'react';\nimport { ScaleLinear } from 'd3';\nimport { score, team } from '../interfaces/types';\nimport { statSize, lineHeight } from './teamStatData';\nimport { v4 as uuidv4 } from 'uuid';\nimport { Medal } from './Medal';\n\ninterface teamStatI {\n    gamesScale: ScaleLinear<number, number, never>,\n    team: team,\n    score: score | undefined,\n    position: number,\n    mouseEnter: any,\n    mouseLeave: any\n}\n\nexport const TeamStat = ({ gamesScale, team, score, position, mouseEnter, mouseLeave }: React.PropsWithChildren<teamStatI>) => {\n\n    const victoriesWidth: number = gamesScale(team.victories);\n    const drawWidth: number = gamesScale(team.draw);\n    const lossWidth: number = gamesScale(team.loss);\n\n    return (\n        <g className=\"teamStat\"\n            key={uuidv4()}\n            transform={\"translate(\" + (0) + \",\" + (position * statSize.height) + \")\"}\n        >\n\n            <svg width={statSize.width} height={statSize.height}>\n                <g transform={\"translate(\" + (statSize.width / 2) + \",\" + 0 + \")\"}>\n                    <rect\n                        transform={\"translate(\" + (- statSize.width / 2) + \",\" + (statSize.height / 2 - lineHeight / 2) + \")\"}\n                        key={uuidv4()}\n                        className=\"stat stat-background\"\n                        cx={0}\n                        cy={0}\n                        width={statSize.width}\n                        height={lineHeight}\n                    />\n                    <rect\n                        transform={\"translate(\" + (- victoriesWidth) + \",\" + (statSize.height / 2 - lineHeight / 2) + \")\"}\n                        key={uuidv4()}\n                        className=\"stat stat-wins\"\n                        cx={0}\n                        cy={0}\n                        rx={1}\n                        width={victoriesWidth}\n                        height={lineHeight}\n                    />\n                    <rect\n                        key={uuidv4()}\n                        transform={\"translate(\" + (drawWidth) + \",\" + (statSize.height / 2 - lineHeight / 2) + \")\"}\n                        className=\"stat stat-loss\"\n                        cx={0}\n                        cy={0}\n                        rx={1}\n                        width={lossWidth}\n                        height={lineHeight}\n                    />\n                    <rect\n                        key={uuidv4()}\n                        transform={\"translate(\" + 0 + \",\" + (statSize.height / 2 - lineHeight / 2) + \")\"}\n                        className=\"stat stat-draw\"\n                        cx={0}\n                        cy={0}\n                        rx={1}\n                        width={drawWidth}\n                        height={lineHeight}\n                    />\n                    {score ? <Medal numberMedals={score.gold} type={\"gold\"} width={victoriesWidth} posX={-victoriesWidth} posY={statSize.height / 2} /> : <></>}\n                    {score ? <Medal numberMedals={score.big_silver} type={\"big_silver\"} width={drawWidth} posX={0} posY={statSize.height / 2} /> : <></>}\n                    {score ? <Medal numberMedals={score.small_silver} type={\"small_silver\"} width={drawWidth} posX={0} posY={statSize.height / 2} /> : <></>}\n                    {score ? <Medal numberMedals={score.bronze} type={\"bronze\"} width={lossWidth} posX={drawWidth} posY={statSize.height / 2} /> : <></>}\n                    <rect\n                        key={uuidv4()}\n                        transform={\"translate(\" + (-statSize.width / 2) + \",\" + (0) + \")\"}\n                        className=\"stat eventBackground\"\n                        width={statSize.width}\n                        height={statSize.height}\n                        onMouseEnter={() => mouseEnter({\n                            team: team,\n                            position: { x: statSize.width / 2, y: (position * statSize.height + statSize.height * 2) },\n                            score: score\n                        })}\n                        onMouseLeave={() => mouseLeave({})}\n                    />\n                </g>\n            </svg>\n        </g>\n    )\n\n}","\n//return the bosx position according to the diplay type\n// type can be TOP, LEFT, RIGHT, BOTTOM\n// return a css property\nexport const getBoxPosition = (display: string, position: { x: number, y: number }) => {\n    return display === \"TOP\" ?\n        `translate(calc( -50% + ${position.x}px),calc( -100% + (${position.y}px))` :\n        display === \"LEFT\" ? `translate(calc( ${position.x}px),calc( -50% + (${position.y}px))` :\n            display === \"BOTTOM\" ? `translate(calc( -50% + ${position.x}px),calc( (${position.y}px))` :\n                display === \"RIGHT\" ? `translate(calc(  -100% + ${position.x}px),calc( -50% + (${position.y}px))` :\n                    `translate(calc( -50% + ${position.x}px),calc( -100% + (${position.y}px))`\n}\n\n//returns a className according to the display type\nexport const getClassType = (display: string) => {\n    return display === undefined || display === \"TOP\" ? \"tooltip-top\" :\n        display === \"LEFT\" ? \"tooltip-left\" : display === \"BOTTOM\" ?\n            \"tooltip-bottom\" : display === \"RIGHT\" ?\n                \"tooltip-right\" : \"tooltip-top\";\n}\n\n//return the proper format of a file size \nexport const formatFileSize = (bytes: number, decimalPoint: number) => {\n    if (bytes === 0) return '0 Bytes';\n    var k = 1000,\n        dm = decimalPoint || 2,\n        sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],\n        i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n}\n","import React from 'react';\nimport { getBoxPosition, getClassType } from './tooltip.data';\n\ninterface tooltipProps {\n    value: React.ReactNode\n    position: {\n        x: number,\n        y: number\n    },\n    opacity: number,\n    display?: \"TOP\" | \"LEFT\" | \"BOTTOM\" | \"RIGHT\",\n}\nexport const Tooltip = ({ value, position, opacity, display }: React.PropsWithChildren<tooltipProps>) => {\n    //check the position is not undefined\n    const pos: \"TOP\" | \"LEFT\" | \"BOTTOM\" | \"RIGHT\" = display === undefined ? \"TOP\" : display;\n\n    return (\n        <div id=\"tooltip\"\n            className={\"tooltip \" + getClassType(pos)}\n            style={{ transform: getBoxPosition(pos, position), opacity: opacity }}>\n            <div className=\"tooltip-value\">\n                {value}\n            </div>\n        </div>\n    )\n}","import React, { useCallback, useState } from 'react';\nimport { score, team } from '../interfaces/types';\nimport { getGraphInfo, filterByClub, size } from './generalVizData';\nimport { TeamStat } from './teamStat';\nimport { v4 as uuidv4 } from 'uuid';\nimport { statSize } from './teamStatData';\nimport { Tooltip } from './Tooltip';\n\n\ninterface generalI {\n    data: team[],\n    scoreData: score[]\n}\n\nexport const GeneralViz = ({ data, scoreData }: React.PropsWithChildren<generalI>) => {\n    const [position, setPosition] = useState({ x: 100, y: 200 });\n    const [opacity, setOpacity] = useState(0);\n    const [info, setInfo] = useState(<p></p>)\n\n    const mouseEnter = useCallback(\n        (d: any) => {\n\n            setInfo(<div>\n                <div className=\"toolTip-tittle\">{d.team.club}</div>\n                <div className=\"toolTip-sub margin-s\">Games  <span className=\"highlight-num\">{d.team.played_games}</span></div>\n                <div className=\"toolTip-sub\">Victories <span className=\"highlight-num\">{d.team.victories}</span></div>\n                <div className=\"toolTip-sub\">Draw <span className=\"highlight-num\">{d.team.draw}</span></div>\n                <div className=\"toolTip-sub margin-s\">Loss <span className=\"highlight-num\">{d.team.loss}</span></div>\n                <div className=\"toolTip-sub\">Gold {d.score ? (<span className=\"highlight-num\">{d.score.gold}</span>) : <span className=\"highlight-num\">0</span>}</div>\n                <div className=\"toolTip-sub\">Big silver {d.score ? (<span className=\"highlight-num\">{d.score.big_silver}</span>) : <span className=\"highlight-num\">0</span>}</div>\n                <div className=\"toolTip-sub\">Small silver {d.score ? (<span className=\"highlight-num\">{d.score.small_silver}</span>) : <span className=\"highlight-num\">0</span>}</div>\n                <div className=\"toolTip-sub\">Bronze {d.score ? (<span className=\"highlight-num\">{d.score.bronze}</span>) : <span className=\"highlight-num\">0</span>}</div>\n            </div>)\n            setPosition({ x: (d.position.x), y: d.position.y })\n            setOpacity(1);\n\n        },\n        []\n    )\n    //hide the tooltip on mouse leave\n    const mouseLeave = useCallback(\n        (d: any) => { setOpacity(0); }, []\n    );\n\n    return (\n        <div className=\"dataViz\">\n            <Tooltip value={info} position={position} opacity={opacity} display={\"BOTTOM\"} />\n            <svg width={size} height={data.length * statSize.height}>\n                {data.map((t: team, i: number) =>\n                    <TeamStat\n                        key={uuidv4()}\n                        gamesScale={getGraphInfo(data)}\n                        team={t}\n                        score={scoreData.find(filterByClub(t.club))}\n                        position={i}\n                        mouseEnter={mouseEnter}\n                        mouseLeave={mouseLeave}\n                    />\n                )}\n            </svg>\n        </div>\n    )\n}","import React from 'react';\n\n\ninterface legendItemI {\n    size: number,\n    figure: JSX.Element,\n    tittle: string\n\n}\n\nexport const LegendItem = ({ size, figure, tittle }: React.PropsWithChildren<legendItemI>) => {\n\n    return (\n        <li >\n            <div className=\"flex center\" >\n                <svg width={size} height={size}>\n                    {figure}\n                </svg>\n                <div className=\"pacer-h-m\" />\n                <span> {tittle}</span>\n            </div>\n        </li>\n    )\n}","import { legendItem } from \"../interfaces/types\";\nimport { arc as d3Arc } from 'd3';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst legendSize: number = 25;\nconst arc = d3Arc();\nconst arcInfo = arc({\n    innerRadius: 0,\n    outerRadius: legendSize / 2,\n    startAngle: 0,\n    endAngle: Math.PI / 2\n});\n\nexport const legendList: legendItem[] = [\n    {\n        size: legendSize,\n        tittle: \"Team\",\n        figure: (<rect\n            key={uuidv4()}\n            transform={\"translate(\" + (0) + \",\" + (legendSize / 2) + \")\"}\n            className=\"stat stat-background\"\n            cx={0}\n            cy={0}\n            width={legendSize}\n            height={4}\n        />)\n    },\n    {\n        size: legendSize,\n        tittle: \"Victories\",\n        figure: (<rect\n            key={uuidv4()}\n            transform={\"translate(\" + (0) + \",\" + (legendSize / 2) + \")\"}\n            className=\"stat stat-wins\"\n            cx={0}\n            cy={0}\n            width={legendSize}\n            height={4}\n        />)\n    },\n    {\n        size: legendSize,\n        tittle: \"Draw\",\n        figure: (<rect\n            key={uuidv4()}\n            transform={\"translate(\" + (0) + \",\" + (legendSize / 2) + \")\"}\n            className=\"stat stat-draw\"\n            cx={0}\n            cy={0}\n            width={legendSize}\n            height={4}\n        />)\n    },\n    {\n        size: legendSize,\n        tittle: \"Loss\",\n        figure: (<rect\n            key={uuidv4()}\n            transform={\"translate(\" + (0) + \",\" + (legendSize / 2) + \")\"}\n            className=\"stat stat-loss\"\n            cx={0}\n            cy={0}\n            width={legendSize}\n            height={4}\n        />)\n    },\n    {\n        size: legendSize,\n        tittle: \"Golden medals\",\n        figure: (\n            <rect transform={\"translate(\" + (0) + \",\" + (0) + \") rotate(\" + (-45) + \")\"}\n                key={uuidv4()}\n                className=\"medal medal-gold\"\n                cx={0}\n                cy={0}\n                rx={15}\n                width={2}\n                height={legendSize}></rect>\n        )\n    },\n    {\n        size: legendSize,\n        tittle: \"Big silver medals\",\n        figure: (\n            <path\n                key={uuidv4()}\n                className=\"medal medal-big-silver\"\n                transform={\"translate(\" + (legendSize / 4) + \",\" + (legendSize / 2 + legendSize / 4) + \")\"}\n                d={arcInfo ? arcInfo : \"\"}\n            />)\n    },\n    {\n        size: legendSize,\n        tittle: \"Small silver medals\",\n        figure: (<circle\n            className=\"medal medal-little-silver\"\n            cx={legendSize / 2}\n            cy={legendSize / 2}\n            r={legendSize / 4}\n        />)\n    },\n    {\n        size: legendSize,\n        tittle: \"Bronze medals\",\n        figure: (<rect transform={\"translate(\" + (legendSize / 2) + \",\" + (0) + \")\"}\n            key={uuidv4()}\n            className=\"medal medal-bronze\"\n            cx={0}\n            cy={0}\n            rx={15}\n            width={2}\n            height={legendSize}></rect>)\n    },\n]","import React from 'react';\nimport { LegendItem } from './Legen.Item';\nimport { legendList } from './legend.data';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport const Legend = () => {\n\n    return (\n        <div className=\"legend\">\n            <h1>Swedish soccer team stats</h1>\n            <ul>\n                {legendList.map((e: any) => <LegendItem key={uuidv4()} size={e.size} figure={e.figure} tittle={e.tittle} />)}\n            </ul>\n        </div>\n    )\n}","import React, { useEffect, useState } from 'react';\nimport { csv } from 'd3';\nimport { map as Rmap } from 'ramda';\nimport { parseData, parseScoreData } from './utils/data';\nimport { score, team } from './interfaces/types'\nimport { GeneralViz } from './components/GeneralViz';\nimport { Legend } from './components/Legend';\nimport './App.css';\n\n\n\nfunction App() {\n  const [data, setData] = useState<team[]>()\n  const [score, setScore] = useState<score[]>();\n\n  //LOAD the data\n  useEffect(() => {\n    csv('./data/AllsvenskanAllStats.csv')\n      .then(Rmap(parseData))\n      .then(\n        teamData => {\n          setData(teamData)\n        }\n      )\n  }, [])\n\n  useEffect(() => {\n    csv('./data/AllsvenskanScore.csv')\n      .then(Rmap(parseScoreData))\n      .then(\n        scoreData => {\n          setScore(scoreData)\n        }\n      )\n  }, [])\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"flex\">\n          {data !== undefined && score !== undefined ? <GeneralViz data={data} scoreData={score} /> : <></>}\n          <div className=\"spacer-h\" />\n          <Legend />\n        </div>\n        <p className=\"credits\">2021 by Jonathan Ramirez for the <a target=\"_blank\" rel=\"noreferrer\" href=\"https://github.com/Dataviz-Stockholm/challenges\">D.V.S Challenge N.2</a></p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}